$verbose_on
: readtest (s -- arr )
  var! myfile
  fcwd "/" strcat myfile @ strcat myfile !
  0 array_make
  0 begin
    myfile @ swap "\n" freadto
    dup myfile @ fsize > if break then
    -3 rotate swap array_appenditem swap
   repeat
   pop dup strlen if
    swap array_appenditem 
   else
    pop
   then
;

: printtest ( arr -- )
  dup var! thearr
  array_count var! thelen
  0 begin
    dup thelen @ >= if break then
    thearr @ over getitem "\r" strcat .
    1 +
   repeat
   pop
;


debug_on

1 2.5 + .

3.0 3 * .

4 4 - .

4 4.5 - .

8 3 / .
8.0 3 / .

(
 "README.md" readtest 
printtest )
exit
(
"words\n" fcwd "/tests/asdf.txt" strcat 0 fwrite debug_line pop 
"more words\n" fcwd "/tests/asdf.txt" strcat fappend debug_line pop 
"tests/asdf.txt" readtest debug_line printtest 
fcwd "/tests/asdf.txt" strcat frm debug_line pop
fcwd "/tests" strcat fgetdir printtest

readline
)
(
"bob has " 2 3 + " apples and gave " 1 2 / " to you." 5 array_make array_interpret
)
(
fork pop pid intostr "\n" strcat .
fork dup if kill then 
)
(
"abcbcba" "b" explode
"hello world" " " explode
popn popn

"a b c d" "_" " " subst debug_line
depth popn

"foobar" "foo" stringpfx debug_line pop
"foobar" "buzz" stringpfx debug_line pop
"" "foo" stringpfx debug_line pop
"foo" "" stringpfx debug_line pop

"testing" 2 3 midstr debug_line pop
"testing" 20 over strlen 1 + midstr debug_line pop
"  asdf  " " " explode debug_line popn

"a" "b" "c" debug_line
2 dupn debug_line nip debug_line nip debug_line depth popn
"a" "b" "c" "d" "e" 3 debug_line put debug_line 

string? number? atom? depth popn

{ "a" "b" "c" }array dup
2@ . nl.
"d" swap 2!
2@ . nl.

depth pop
)

(
1 begin 
    dup 3 = if
        2 .
        break
    then
    dup 5 = if
        break
    then
    1 + dup 5 >
until
)
(
1  11 1 cjmp 2 3 -4 6
depth popn
1 1 +
4 *
3 -
2 /
0 if 2 then 3
)